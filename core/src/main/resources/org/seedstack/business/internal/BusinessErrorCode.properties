#
# Copyright Â© 2013-2024, The SeedStack authors <http://seedstack.org>
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

AMBIGUOUS_CONSTRUCTOR_FOUND=Ambiguous constructor found for: '${constructor1}', '${constructor2}' of object: '${object}'.
AMBIGUOUS_CONSTRUCTOR_FOUND.fix=Please check for null parameters or ambiguous constructor with matching primitives and types for parameters: '${parameters}'.
AMBIGUOUS_METHOD_FOUND=Ambiguous method found for: '${method1}', '${method2}' of object: '${object}'.
AMBIGUOUS_METHOD_FOUND.fix=Please check for null parameters or ambiguous method with matching primitives and types for parameters: '${parameters}'.
VALUE_CANNOT_BE_COMPARED=Value '${value}' of type '${valueType}' cannot be compared.
VALUE_CANNOT_BE_COMPARED.fix=Make sure type '${valueType}' has a defined natural order (is a primitive type or implements 'Comparable').
CLASS_IS_NOT_AN_ANNOTATION=Specified qualifier for class '${class}' is not an annotation class: '${qualifier}'.
CLASS_IS_NOT_AN_ANNOTATION.fix=You can either specify an annotation fully qualified name or an arbitrary string as qualifier.
CONFLICTING_DTO_FACTORY_INDEX_MATCHING=DTO '${dtoClass}' has a ${annotation} annotation on '${getter}' whose index (${index}) is conflicting with the one on '${conflictingGetter}'.
CONFLICTING_DTO_FACTORY_INDEX_MATCHING.fix=Set non-conflicting 'index' attributes on all ${annotation} annotations to form an ordered argument list. \
  This list will be used to find a matching factory method or a constructor capable of creating the aggregate. If you have only one argument to pass, you can \
  omit the index parameter. If matching a tuple take into account the 'typeIndex' attribute to differentiate between aggregates within the tuple.
CONFLICTING_DTO_FACTORY_INDEX_MATCHING.url=http://seedstack.org/docs/business/manual/assemblers#fluent-assembler-dsl
CONFLICTING_DTO_FACTORY_MATCHING=DTO '${dtoClass}' has a ${annotation} annotation on '${getter}' in conflict with the one on '${conflictingGetter}'.
CONFLICTING_DTO_FACTORY_MATCHING.fix=Remove on of the annotations to avoid conflict. If you want to specify multiple arguments to the factory method or constructor, \
  specify non-conflicting 'index' attributes on all ${annotation} annotations to form an ordered argument list. This list will be used to find a matching factory \
  method or a constructor capable of creating the aggregate. If matching a tuple take into account the 'typeIndex' attribute to differentiate between aggregates within the tuple.
CONFLICTING_DTO_FACTORY_MATCHING.url=http://seedstack.org/docs/business/manual/assemblers#fluent-assembler-dsl
CONFLICTING_DTO_ID_INDEX_MATCHING=DTO '${dtoClass}' has a ${annotation} annotation on '${getter}' whose index (${index}) is conflicting with the one on '${conflictingGetter}'.
CONFLICTING_DTO_ID_INDEX_MATCHING.fix=Set non-conflicting 'index' attributes on all ${annotation} annotations to form an ordered argument list. \
  This list will be used to find a matching factory method or a constructor capable of creating the composite identifier. If you want to match a simple identifier \
  instead, apply a unique ${annotation} annotation without index parameter on the getter of the identifier. If matching a tuple take into \
  account the 'typeIndex' attribute to differentiate between aggregates within the tuple.
CONFLICTING_DTO_ID_INDEX_MATCHING.url=http://seedstack.org/docs/business/manual/assemblers#fluent-assembler-dsl
CONFLICTING_DTO_ID_MATCHING=DTO '${dtoClass}' has a ${annotation} annotation on '${getter}' in conflict with the one on '${conflictingGetter}'.
CONFLICTING_DTO_ID_MATCHING.fix=Remove one of the annotations to avoid conflict. If you want to match \
  a composite identifier instead, set non-conflicting 'index' attributes on all ${annotation} annotations to form an ordered argument list. \
  This list will be used to find a matching factory method or a constructor capable of creating the composite identifier. If matching a tuple take into \
  account the 'typeIndex' attribute to differentiate between aggregates within the tuple.
CONFLICTING_DTO_ID_MATCHING.url=http://seedstack.org/docs/business/manual/assemblers#fluent-assembler-dsl
CONFLICTING_DTO_TUPLE_MATCHING=DTO '${dtoClass}' has a conflict in the matching of tuple aggregate number ${aggregateIndex}. See the cause for details on the conflict.
CONFLICTING_DTO_TUPLE_MATCHING.url=http://seedstack.org/docs/business/manual/assemblers#fluent-assembler-dsl
DOMAIN_OBJECT_CONSTRUCTOR_NOT_FOUND=Constructor accepting parameters '${parameters}' not found on class '${domainObject}'.
DOMAIN_OBJECT_CONSTRUCTOR_NOT_FOUND.fix=Check that a constructor of '${domainObject}' accepting the following parameters exists: '${parameters}'.
ERROR_ACCESSING_FIELD=An error occurred when trying to access field '${fieldName}' of class '${className}'.
ERROR_ACCESSING_FIELD.fix=See the exception cause(s) for details.
EVENT_CYCLE_DETECTED=Illegal cycle detected when publishing event '${event}'.
EVENT_CYCLE_DETECTED.fix=Break any cycle that can occur when an event of class '${event}' is published.
EXCEPTION_OCCURRED_DURING_EVENT_HANDLER_INVOCATION=Event handler invocation failed when publishing event of class '${event}'.
INCOMPATIBLE_IDENTITY_TYPES=The identity generator '${generatorClass}' generated an identity of type '${actualIdClass}' but an identity of type '${expectedIdClass}' was expected.
INCOMPATIBLE_IDENTITY_TYPES.fix=Make sure to use an identity generator that can generate identities of type '${expectedIdClass}'.
INCOMPATIBLE_IDENTITY_TYPES.url=http://seedstack.org/docs/business/manual/factories
ILLEGAL_FACTORY=Illegal factory class '${class}'.
ILLEGAL_FACTORY.fix=Check that '${class}' implements 'Factory'.
ILLEGAL_IDENTITY_GENERATOR=Illegal identity generator class '${class}'.
ILLEGAL_IDENTITY_GENERATOR.fix=Check that '${class}' implements 'IdentityGenerator'.
ILLEGAL_POLICY=Illegal policy class '${class}'.
ILLEGAL_POLICY.fix=Check that '${class}' is annotated with '@DomainPolicy'.
ILLEGAL_REPOSITORY=Illegal repository class '${class}'.
ILLEGAL_REPOSITORY.fix=Check that '${class}' implements 'Repository'.
ILLEGAL_SERVICE=Illegal service class '${class}'.
ILLEGAL_SERVICE.fix=Check that '${class}' is annotated with '@Service'.
NO_CONVERTER_FOUND=No converter found for specification '${specificationClass}'.
NO_CONVERTER_FOUND.fix=Check that a class implementing 'org.seedstack.business.spi.SpecificationConverter<${specificationClass}, ${contextClass}, ${targetClass}>' exists.
NO_IDENTITY_CAN_BE_RESOLVED_FROM_DTO=No identity can be resolved from DTO class '${dtoClass}'.
NO_IDENTITY_CAN_BE_RESOLVED_FROM_DTO.fix=Explicitly specify which DTO attributes should be used as identifier
NO_IDENTITY_CAN_BE_RESOLVED_FROM_DTO.url=http://seedstack.org/docs/business/manual/factories
NO_IDENTITY_FIELD_DECLARED_FOR_CONTAINER=No identity field was found for class '${containerClass}'.
NO_IDENTITY_FIELD_DECLARED_FOR_CONTAINER.fix=Annotate the field containing the identity with '@Identity'.
NO_IDENTITY_FIELD_DECLARED_FOR_CONTAINER.url=http://seedstack.org/docs/business/manual/factories
NO_IDENTITY_GENERATOR_SPECIFIED=No identity generator specified for the class '${containerClass}'.
NO_IDENTITY_GENERATOR_SPECIFIED.fix=Specify an identity generator class in the 'generator' attribute of the '@Identity' annotation or remove the annotation.
NO_IDENTITY_GENERATOR_SPECIFIED.url=http://seedstack.org/docs/business/manual/factories
RESOLVED_DTO_ID_IS_INVALID=DTO identifier class '${dtoIdClass}' is not assignable to aggregate identifier class '${aggregateIdClass}'.
RESOLVED_DTO_ID_IS_INVALID.fix=Update the DTO or map another attribute of the DTO to match aggregate identifier class '${aggregateIdClass}'.
RESOLVED_DTO_ID_IS_NOT_PRODUCIBLE=Composite DTO identifier corresponds to aggregate identifier class '${aggregateIdClass}' which cannot be created because it doesn't implement 'Producible'.
RESOLVED_DTO_ID_IS_NOT_PRODUCIBLE.fix=Make aggregate identifier class '${aggregateIdClass}' implement 'Producible', update the DTO or directly map the required object from a unique DTO getter.
UNABLE_TO_CREATE_TUPLE=Unable to create tuple.
UNABLE_TO_FIND_ASSEMBLER=No assembler was found to assemble '${aggregateRoot}' to '${dto}'.
UNABLE_TO_FIND_ASSEMBLER.fix=Make sure that an assembler without qualifier exists. If you want to use a qualified assembler (like a default assembler), specify its qualifier.
UNABLE_TO_FIND_ASSEMBLER_WITH_QUALIFIER=No '${qualifier}' assembler was found to assemble '${aggregateRoot}' to '${dto}'.
UNABLE_TO_FIND_ASSEMBLER_WITH_QUALIFIER.fix=Make sure that an assembler qualified with '${qualifier}' exists. If you want to use a default assembler, make sure that the '${dto}' class is annotated with '@DtoOf'.
UNABLE_TO_FIND_FACTORY_METHOD=Unable to find a suitable factory method for aggregate class '${aggregateClass}' with parameters: '${parameters}'.
UNABLE_TO_FIND_FACTORY_METHOD.fix=Make sure a factory exists for aggregate class '${aggregateClass}' and has a method accepting the following parameters: '${parameters}'.
UNABLE_TO_INVOKE_CONSTRUCTOR=Unable to invoke constructor '${constructor}' of domain object '${domainObject}' (parameters: '${parameters}').
UNABLE_TO_INVOKE_CONSTRUCTOR.fix=Make sure that a suitable constructor is available on domain object '${domainObject}'.
UNABLE_TO_INVOKE_FACTORY_METHOD=Unable to invoke factory method '${factoryClass}'#'${factoryMethod}' for aggregate class '${aggregateClass}' with the following parameters: '${parameters}'.
UNABLE_TO_INVOKE_FACTORY_METHOD.fix=Make sure that the factory method '${factoryClass}'#'${factoryMethod}' is public and accepts the following parameters: '${parameters}'.
UNABLE_TO_FIND_SUITABLE_DTO_INFO_RESOLVER=Unable to find a suitable DTO information resolver for DTO class '${dtoClass}'.
UNQUALIFIED_IDENTITY_GENERATOR=Missing qualifier for identity generator in class '${containerClass}'.
UNQUALIFIED_IDENTITY_GENERATOR.fix=Specify a qualifier annotation on field '${field}' along the '@Identity' annotation. Alternatively you can specify the qualifier in class configuration.
UNQUALIFIED_IDENTITY_GENERATOR.url=http://seedstack.org/docs/business/manual/factories
UNRESOLVED_FIELD=Unable to find field '${fieldName}' in class '${className}'.
UNRESOLVED_FIELD.fix=Add a field named '${fieldName}' in the corresponding class or fix the field reference.
MERGE_NOT_IMPLEMENTED=Aggregate assemble is not implemented in class '${className}'.
MERGE_NOT_IMPLEMENTED.fix=Implement the method 'mergeDtoIntoAggregate' in class '${className}'
MERGE_NOT_IMPLEMENTED.url=http://seedstack.org/docs/business/assemblers/#custom-assembler
ASSEMBLE_NOT_IMPLEMENTED=Dto assemble is not implemented in class '${className}'.
ASSEMBLE_NOT_IMPLEMENTED.fix=Implement the method 'mergeAggregateIntoDto' in class '${className}'
ASSEMBLE_NOT_IMPLEMENTED.url=http://seedstack.org/docs/business/assemblers/#custom-assembler

